<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>husmus.dev</title>
    <link>//localhost:1313/posts/</link>
    <description>husmus.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Mon, 25 Mar 2024 14:24:12 +0300</lastBuildDate>
    
    <atom:link href="//localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting Started with The Rust FFI</title>
      <link>//localhost:1313/posts/rust-ffi/</link>
      <pubDate>Mon, 25 Mar 2024 14:24:12 +0300</pubDate>
      
      <guid>//localhost:1313/posts/rust-ffi/</guid>
      <description>&lt;h2 id=&#34;getting-started-with-the-rust-ffi&#34; &gt;Getting Started with The Rust FFI
&lt;span&gt;
    &lt;a href=&#34;#getting-started-with-the-rust-ffi&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;br&gt;
After spending some time experimenting with Rust&#39;s FFI, I thought I&#39;d write a short article on getting started with it, pointing to some useful resources and tools.
&lt;p&gt;The Rust FFI (Foreign-Function Interface) provides a way for Rust code to natively &amp;ldquo;talk&amp;rdquo; to C code and C APIs / libraries. This makes it possible to use Rust in existing C projects and allows for communicating directly with existing OS APIs (e.g., POSIX, WinAPI). This involves using types provided in the standard library (std::ffi) or core::ffi when using no_std on bare metal.&lt;/p&gt;
&lt;p&gt;To call C code from Rust, a function definition must be provided within an &lt;code&gt;extern &amp;quot;C&amp;quot;&lt;/code&gt; block, similar to the signature of the actual C function. This function signature will be written in Rust but must use types provided by the FFI instead of Rust&amp;rsquo;s native types (e.g., c_int over i32).&lt;/p&gt;
&lt;p&gt;To call Rust code from C, a Rust function must be defined as &lt;code&gt;pub extern &amp;quot;C&amp;quot;&lt;/code&gt; and must use C types in its signature. The #[no_mangle] annotation must also be used to ensure the Rust compiler doesn&amp;rsquo;t change the function name during compilation. For more details, see &lt;a href=&#34;https://docs.rust-embedded.org/book/interoperability/index.html&#34;&gt;this&lt;/a&gt; page from The Embedded Rust Book.&lt;/p&gt;
&lt;p&gt;Note that interoperating with external code requires using an &lt;code&gt;unsafe&lt;/code&gt; block as the compiler cannot provide safety guarantees for non-Rust code.&lt;/p&gt;
&lt;p&gt;I believe the FFI should be seen as a tool to help transition to Rust, rather than an excuse not to use it when it eventually makes life difficult :)
Rust does have a steeper learning curve than C, but its benefits are well worth the investment.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;(https://docs.rust-embedded.org/book/index.html)&#34;&gt;The Rust Embedded Book&lt;/a&gt; is a great place to learn more about the FFI and dealing with no_std.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Some useful resources:&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/rust-lang/libc&#34;&gt;libc&lt;/a&gt;:
Provides an interface to the C standard library for the FFI and can work in no_std environments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/nix-rust/nix&#34;&gt;nix&lt;/a&gt;:
A higher-level wrapper around libc for *nix systems, providing a safer abstraction.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/rust-lang/cc-rs&#34;&gt;cc-rs&lt;/a&gt;:
A build-stage tool that makes it easy to include C files within Rust&amp;rsquo;s build process by communicating with the platform&amp;rsquo;s C compiler.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/rust-lang/rust-bindgen&#34;&gt;rust-bindgen&lt;/a&gt;:
A tool to automatically generate FFI bindings from a C header file.
&lt;a href=&#34;https://lnkd.in/gP8hX9vF&#34;&gt;https://lnkd.in/gP8hX9vF&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The next thing I want to do is experiment with the &lt;a href=&#34;https://github.com/rust-embedded/embedded-hal&#34;&gt;embedded-hal&lt;/a&gt;, to learn how to use Rust to communicate directly with embedded hardware.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
